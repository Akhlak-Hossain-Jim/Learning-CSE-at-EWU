SET SERVEROUTPUT ON;

DECLARE
    N NUMBER;
    SUM_val NUMBER := 0;
    I_val NUMBER := 0;
BEGIN
    N := &ENTER_NUMBER;

    WHILE I_val <= N LOOP
        SUM_val := SUM_val + I_val;
        I_val := I_val + 1;
    END LOOP;

    DBMS_OUTPUT.PUT_LINE('Sum of 1 to ' || N || ' is = ' || SUM_val);
END;
/


CREATE TABLE STUDENTS(
    STUDENT_ID NUMBER,
    NAME VARCHAR2(20),
    DEPT_NAME VARCHAR2(3),
    SEMESTER_FEE NUMBER
);

INSERT INTO STUDENTS VALUES(201, 'Nabila','CSE',70000);
INSERT INTO STUDENTS VALUES(202, 'Hasan','BBA',55000);
INSERT INTO STUDENTS VALUES(203, 'Sohan','EEE',45000);

SET SERVEROUTPUT ON;
DECLARE
    CURSOR C_S IS
        SELECT * FROM STUDENTS WHERE SEMESTER_FEE > 50000;

    SID STUDENTS.STUDENT_ID%TYPE;
    S_NAME STUDENTS.NAME%TYPE;
    S_DPT STUDENTS.DEPT_NAME%TYPE;
    SS_FEE STUDENTS.SEMESTER_FEE%TYPE;

    COUN NUMBER := 0;

BEGIN
    OPEN C_S;

    LOOP
        FETCH C_S INTO SID, S_NAME, S_DPT, SS_FEE;
        EXIT WHEN C_S%NOTFOUND;
        UPDATE STUDENTS SET SEMESTER_FEE = SEMESTER_FEE - 2000 WHERE STUDENT_ID = SID;
        COUN := COUN+1;
    END LOOP;
    CLOSE C_S;
    DBMS_OUTPUT.PUT_LINE('TOTAL STUDENTS UPDATED: '|| COUN);
END;
/

CREATE OR REPLACE FUNCTION CALCULATE_SCHOLARSHIP(
    P_SEMESTER_FEE IN NUMBER
) RETURN NUMBER
IS
    V_SCHOLARSHIP_AMOUNT NUMBER;
BEGIN
    V_SCHOLARSHIP_AMOUNT := P_SEMESTER_FEE * 0.10;
    RETURN V_SCHOLARSHIP_AMOUNT;
END CALCULATE_SCHOLARSHIP;
/

SELECT STUDENT_ID, NAME, SEMESTER_FEE,
     CALCULATE_SCHOLARSHIP(SEMESTER_FEE) AS SCHOLARSHIP
    FROM STUDENTS;

CREATE TABLE BACKUP_STUDENTS(
    STUDENT_ID NUMBER,
    NAME VARCHAR2(20),
    DEPT_NAME VARCHAR2(3),
    SEMESTER_FEE NUMBER
);

CREATE OR REPLACE TRIGGER STUDENTS_DELETE_BACKUP
BEFORE DELETE ON STUDENTS
FOR EACH ROW
BEGIN
    INSERT INTO BACKUP_STUDENTS(STUDENT_ID, NAME, DEPT_NAME, SEMESTER_FEE)
    VALUES(:OLD.STUDENT_ID, :OLD.NAME, :OLD.DEPT_NAME, :OLD.SEMESTER_FEE);
END;
/

